name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test_build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node.js and Cache Dependencies
        uses: actions/setup-node@v4
        with:
          node-version: '21' # install Node.js v21.x
          cache: npm
          cache-dependency-path: app/package-lock.json # cache dependencies for the app

      - name: Install dependencies
        run: npm ci # Install dependencies
        working-directory: app

      - name: Lint
        run: npm run lint # Lint the application
        working-directory: app

      - name: Build
        run: npm run build # Build the application
        working-directory: app

      - name: Run tests
        # run tests only on changed files and generate coverage report in JSON format
        run: npm run test
        working-directory: app

  release:
    needs: test_build
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.retrieve_version.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Get the version from version.json file and store it in the output file
      - name: Get version from version.json
        id: retrieve_version
        run: |
          new_version=$(jq -r '.version' version.json)
          if [ -z "$new_version" ]; then
            echo "Error: version field is empty or not found in version.json!"
            exit 1
          fi
          echo "new_version=$new_version" >> "$GITHUB_OUTPUT"

      # Create tag to the repository by using the version from the output file
      - name: Create tag
        id: create-tag
        run: |
          new_version=${{ steps.retrieve_version.outputs.new_version }}

          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git tag -a "$new_version" -m "Release version $new_version"
          git push origin "$new_version"

          echo "new_tag=$new_version" >> "$GITHUB_OUTPUT"

      # Create GitHub release
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_version=${{ steps.retrieve_version.outputs.new_version }}
          new_tag=${{ steps.create-tag.outputs.new_tag }}          

          sed -n "/## \[$new_version\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md

          gh release create "$new_tag" \
            --title "Release ${{ steps.retrieve_version.outputs.new_version }}" \
            --notes-file release_notes.md \
            --target ${{ github.ref_name }}
